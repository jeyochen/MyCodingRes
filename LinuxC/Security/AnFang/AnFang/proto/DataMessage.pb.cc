// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AFPROC {

namespace {

const ::google::protobuf::Descriptor* MCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* MRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DataMessage_2eproto() {
  protobuf_AddDesc_DataMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DataMessage.proto");
  GOOGLE_CHECK(file != NULL);
  MCommand_descriptor_ = file->message_type(0);
  static const int MCommand_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, d_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, d_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, cmd_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, cmd_func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, execommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, dcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, sk_hostno_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, sk_hostno_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, sk_host_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, sk_fangqu_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, fd_),
  };
  MCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MCommand_descriptor_,
      MCommand::default_instance_,
      MCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MCommand));
  MRequest_descriptor_ = file->message_type(1);
  static const int MRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, d_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, d_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, cmd_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, cmd_func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, execommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, dcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, m_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, seq_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, from_type_),
  };
  MRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MRequest_descriptor_,
      MRequest::default_instance_,
      MRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MRequest));
  MResponse_descriptor_ = file->message_type(2);
  static const int MResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MResponse, resp_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MResponse, resp_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MResponse, seq_num_),
  };
  MResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MResponse_descriptor_,
      MResponse::default_instance_,
      MResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DataMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MCommand_descriptor_, &MCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MRequest_descriptor_, &MRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MResponse_descriptor_, &MResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DataMessage_2eproto() {
  delete MCommand::default_instance_;
  delete MCommand_reflection_;
  delete MRequest::default_instance_;
  delete MRequest_reflection_;
  delete MResponse::default_instance_;
  delete MResponse_reflection_;
}

void protobuf_AddDesc_DataMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021DataMessage.proto\022\006AFPROC\"\362\001\n\010MCommand"
    "\022\016\n\006d_type\030\001 \002(\005\022\021\n\td_address\030\002 \002(\005\022\021\n\tc"
    "md_class\030\003 \002(\005\022\020\n\010cmd_func\030\004 \002(\005\022\022\n\nexec"
    "ommand\030\005 \002(\t\022\r\n\005dcode\030\006 \001(\t\022\023\n\013sk_hostno"
    "_h\030\007 \001(\005\022\023\n\013sk_hostno_l\030\010 \001(\005\022\025\n\rsk_host"
    "_group\030\t \001(\005\022\024\n\014sk_fangqu_no\030\n \001(\005\022\n\n\002ip"
    "\030\013 \001(\t\022\014\n\004port\030\014 \001(\005\022\n\n\002fd\030\r \001(\005\"\304\001\n\010MRe"
    "quest\022\016\n\006d_type\030\001 \002(\005\022\021\n\td_address\030\002 \002(\005"
    "\022\021\n\tcmd_class\030\003 \002(\005\022\020\n\010cmd_func\030\004 \002(\005\022\022\n"
    "\nexecommand\030\005 \002(\t\022\r\n\005dcode\030\006 \001(\t\022\016\n\006m_bo"
    "dy\030\007 \002(\t\022\r\n\005token\030\010 \001(\t\022\017\n\007seq_num\030\t \001(\t"
    "\022\n\n\002fd\030\n \001(\005\022\021\n\tfrom_type\030\013 \001(\005\"E\n\tMResp"
    "onse\022\021\n\tresp_code\030\001 \002(\t\022\024\n\014resp_message\030"
    "\002 \001(\t\022\017\n\007seq_num\030\003 \001(\t", 542);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DataMessage.proto", &protobuf_RegisterTypes);
  MCommand::default_instance_ = new MCommand();
  MRequest::default_instance_ = new MRequest();
  MResponse::default_instance_ = new MResponse();
  MCommand::default_instance_->InitAsDefaultInstance();
  MRequest::default_instance_->InitAsDefaultInstance();
  MResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DataMessage_2eproto {
  StaticDescriptorInitializer_DataMessage_2eproto() {
    protobuf_AddDesc_DataMessage_2eproto();
  }
} static_descriptor_initializer_DataMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MCommand::kDTypeFieldNumber;
const int MCommand::kDAddressFieldNumber;
const int MCommand::kCmdClassFieldNumber;
const int MCommand::kCmdFuncFieldNumber;
const int MCommand::kExecommandFieldNumber;
const int MCommand::kDcodeFieldNumber;
const int MCommand::kSkHostnoHFieldNumber;
const int MCommand::kSkHostnoLFieldNumber;
const int MCommand::kSkHostGroupFieldNumber;
const int MCommand::kSkFangquNoFieldNumber;
const int MCommand::kIpFieldNumber;
const int MCommand::kPortFieldNumber;
const int MCommand::kFdFieldNumber;
#endif  // !_MSC_VER

MCommand::MCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MCommand::InitAsDefaultInstance() {
}

MCommand::MCommand(const MCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MCommand::SharedCtor() {
  _cached_size_ = 0;
  d_type_ = 0;
  d_address_ = 0;
  cmd_class_ = 0;
  cmd_func_ = 0;
  execommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sk_hostno_h_ = 0;
  sk_hostno_l_ = 0;
  sk_host_group_ = 0;
  sk_fangqu_no_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  fd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MCommand::~MCommand() {
  SharedDtor();
}

void MCommand::SharedDtor() {
  if (execommand_ != &::google::protobuf::internal::kEmptyString) {
    delete execommand_;
  }
  if (dcode_ != &::google::protobuf::internal::kEmptyString) {
    delete dcode_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void MCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MCommand_descriptor_;
}

const MCommand& MCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataMessage_2eproto();
  return *default_instance_;
}

MCommand* MCommand::default_instance_ = NULL;

MCommand* MCommand::New() const {
  return new MCommand;
}

void MCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    d_type_ = 0;
    d_address_ = 0;
    cmd_class_ = 0;
    cmd_func_ = 0;
    if (has_execommand()) {
      if (execommand_ != &::google::protobuf::internal::kEmptyString) {
        execommand_->clear();
      }
    }
    if (has_dcode()) {
      if (dcode_ != &::google::protobuf::internal::kEmptyString) {
        dcode_->clear();
      }
    }
    sk_hostno_h_ = 0;
    sk_hostno_l_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sk_host_group_ = 0;
    sk_fangqu_no_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    fd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 d_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &d_type_)));
          set_has_d_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_d_address;
        break;
      }

      // required int32 d_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &d_address_)));
          set_has_d_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmd_class;
        break;
      }

      // required int32 cmd_class = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_class_)));
          set_has_cmd_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmd_func;
        break;
      }

      // required int32 cmd_func = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_func:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_func_)));
          set_has_cmd_func();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_execommand;
        break;
      }

      // required string execommand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execommand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execommand().data(), this->execommand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dcode;
        break;
      }

      // optional string dcode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dcode().data(), this->dcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sk_hostno_h;
        break;
      }

      // optional int32 sk_hostno_h = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sk_hostno_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sk_hostno_h_)));
          set_has_sk_hostno_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sk_hostno_l;
        break;
      }

      // optional int32 sk_hostno_l = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sk_hostno_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sk_hostno_l_)));
          set_has_sk_hostno_l();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sk_host_group;
        break;
      }

      // optional int32 sk_host_group = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sk_host_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sk_host_group_)));
          set_has_sk_host_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sk_fangqu_no;
        break;
      }

      // optional int32 sk_fangqu_no = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sk_fangqu_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sk_fangqu_no_)));
          set_has_sk_fangqu_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ip;
        break;
      }

      // optional string ip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_port;
        break;
      }

      // optional int32 port = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fd;
        break;
      }

      // optional int32 fd = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 d_type = 1;
  if (has_d_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->d_type(), output);
  }

  // required int32 d_address = 2;
  if (has_d_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->d_address(), output);
  }

  // required int32 cmd_class = 3;
  if (has_cmd_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd_class(), output);
  }

  // required int32 cmd_func = 4;
  if (has_cmd_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cmd_func(), output);
  }

  // required string execommand = 5;
  if (has_execommand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execommand().data(), this->execommand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->execommand(), output);
  }

  // optional string dcode = 6;
  if (has_dcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dcode().data(), this->dcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dcode(), output);
  }

  // optional int32 sk_hostno_h = 7;
  if (has_sk_hostno_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sk_hostno_h(), output);
  }

  // optional int32 sk_hostno_l = 8;
  if (has_sk_hostno_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sk_hostno_l(), output);
  }

  // optional int32 sk_host_group = 9;
  if (has_sk_host_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sk_host_group(), output);
  }

  // optional int32 sk_fangqu_no = 10;
  if (has_sk_fangqu_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sk_fangqu_no(), output);
  }

  // optional string ip = 11;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ip(), output);
  }

  // optional int32 port = 12;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->port(), output);
  }

  // optional int32 fd = 13;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 d_type = 1;
  if (has_d_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->d_type(), target);
  }

  // required int32 d_address = 2;
  if (has_d_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->d_address(), target);
  }

  // required int32 cmd_class = 3;
  if (has_cmd_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmd_class(), target);
  }

  // required int32 cmd_func = 4;
  if (has_cmd_func()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cmd_func(), target);
  }

  // required string execommand = 5;
  if (has_execommand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execommand().data(), this->execommand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->execommand(), target);
  }

  // optional string dcode = 6;
  if (has_dcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dcode().data(), this->dcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dcode(), target);
  }

  // optional int32 sk_hostno_h = 7;
  if (has_sk_hostno_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sk_hostno_h(), target);
  }

  // optional int32 sk_hostno_l = 8;
  if (has_sk_hostno_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sk_hostno_l(), target);
  }

  // optional int32 sk_host_group = 9;
  if (has_sk_host_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sk_host_group(), target);
  }

  // optional int32 sk_fangqu_no = 10;
  if (has_sk_fangqu_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sk_fangqu_no(), target);
  }

  // optional string ip = 11;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ip(), target);
  }

  // optional int32 port = 12;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->port(), target);
  }

  // optional int32 fd = 13;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 d_type = 1;
    if (has_d_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->d_type());
    }

    // required int32 d_address = 2;
    if (has_d_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->d_address());
    }

    // required int32 cmd_class = 3;
    if (has_cmd_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_class());
    }

    // required int32 cmd_func = 4;
    if (has_cmd_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_func());
    }

    // required string execommand = 5;
    if (has_execommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execommand());
    }

    // optional string dcode = 6;
    if (has_dcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dcode());
    }

    // optional int32 sk_hostno_h = 7;
    if (has_sk_hostno_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sk_hostno_h());
    }

    // optional int32 sk_hostno_l = 8;
    if (has_sk_hostno_l()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sk_hostno_l());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sk_host_group = 9;
    if (has_sk_host_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sk_host_group());
    }

    // optional int32 sk_fangqu_no = 10;
    if (has_sk_fangqu_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sk_fangqu_no());
    }

    // optional string ip = 11;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 12;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 fd = 13;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MCommand::MergeFrom(const MCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_d_type()) {
      set_d_type(from.d_type());
    }
    if (from.has_d_address()) {
      set_d_address(from.d_address());
    }
    if (from.has_cmd_class()) {
      set_cmd_class(from.cmd_class());
    }
    if (from.has_cmd_func()) {
      set_cmd_func(from.cmd_func());
    }
    if (from.has_execommand()) {
      set_execommand(from.execommand());
    }
    if (from.has_dcode()) {
      set_dcode(from.dcode());
    }
    if (from.has_sk_hostno_h()) {
      set_sk_hostno_h(from.sk_hostno_h());
    }
    if (from.has_sk_hostno_l()) {
      set_sk_hostno_l(from.sk_hostno_l());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sk_host_group()) {
      set_sk_host_group(from.sk_host_group());
    }
    if (from.has_sk_fangqu_no()) {
      set_sk_fangqu_no(from.sk_fangqu_no());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MCommand::CopyFrom(const MCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MCommand::Swap(MCommand* other) {
  if (other != this) {
    std::swap(d_type_, other->d_type_);
    std::swap(d_address_, other->d_address_);
    std::swap(cmd_class_, other->cmd_class_);
    std::swap(cmd_func_, other->cmd_func_);
    std::swap(execommand_, other->execommand_);
    std::swap(dcode_, other->dcode_);
    std::swap(sk_hostno_h_, other->sk_hostno_h_);
    std::swap(sk_hostno_l_, other->sk_hostno_l_);
    std::swap(sk_host_group_, other->sk_host_group_);
    std::swap(sk_fangqu_no_, other->sk_fangqu_no_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(fd_, other->fd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MCommand_descriptor_;
  metadata.reflection = MCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MRequest::kDTypeFieldNumber;
const int MRequest::kDAddressFieldNumber;
const int MRequest::kCmdClassFieldNumber;
const int MRequest::kCmdFuncFieldNumber;
const int MRequest::kExecommandFieldNumber;
const int MRequest::kDcodeFieldNumber;
const int MRequest::kMBodyFieldNumber;
const int MRequest::kTokenFieldNumber;
const int MRequest::kSeqNumFieldNumber;
const int MRequest::kFdFieldNumber;
const int MRequest::kFromTypeFieldNumber;
#endif  // !_MSC_VER

MRequest::MRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MRequest::InitAsDefaultInstance() {
}

MRequest::MRequest(const MRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MRequest::SharedCtor() {
  _cached_size_ = 0;
  d_type_ = 0;
  d_address_ = 0;
  cmd_class_ = 0;
  cmd_func_ = 0;
  execommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fd_ = 0;
  from_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MRequest::~MRequest() {
  SharedDtor();
}

void MRequest::SharedDtor() {
  if (execommand_ != &::google::protobuf::internal::kEmptyString) {
    delete execommand_;
  }
  if (dcode_ != &::google::protobuf::internal::kEmptyString) {
    delete dcode_;
  }
  if (m_body_ != &::google::protobuf::internal::kEmptyString) {
    delete m_body_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (seq_num_ != &::google::protobuf::internal::kEmptyString) {
    delete seq_num_;
  }
  if (this != default_instance_) {
  }
}

void MRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MRequest_descriptor_;
}

const MRequest& MRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataMessage_2eproto();
  return *default_instance_;
}

MRequest* MRequest::default_instance_ = NULL;

MRequest* MRequest::New() const {
  return new MRequest;
}

void MRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    d_type_ = 0;
    d_address_ = 0;
    cmd_class_ = 0;
    cmd_func_ = 0;
    if (has_execommand()) {
      if (execommand_ != &::google::protobuf::internal::kEmptyString) {
        execommand_->clear();
      }
    }
    if (has_dcode()) {
      if (dcode_ != &::google::protobuf::internal::kEmptyString) {
        dcode_->clear();
      }
    }
    if (has_m_body()) {
      if (m_body_ != &::google::protobuf::internal::kEmptyString) {
        m_body_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_seq_num()) {
      if (seq_num_ != &::google::protobuf::internal::kEmptyString) {
        seq_num_->clear();
      }
    }
    fd_ = 0;
    from_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 d_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &d_type_)));
          set_has_d_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_d_address;
        break;
      }

      // required int32 d_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &d_address_)));
          set_has_d_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmd_class;
        break;
      }

      // required int32 cmd_class = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_class_)));
          set_has_cmd_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmd_func;
        break;
      }

      // required int32 cmd_func = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_func:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_func_)));
          set_has_cmd_func();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_execommand;
        break;
      }

      // required string execommand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execommand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->execommand().data(), this->execommand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dcode;
        break;
      }

      // optional string dcode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dcode().data(), this->dcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_body;
        break;
      }

      // required string m_body = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_body().data(), this->m_body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_token;
        break;
      }

      // optional string token = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_seq_num;
        break;
      }

      // optional string seq_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seq_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seq_num().data(), this->seq_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fd;
        break;
      }

      // optional int32 fd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_from_type;
        break;
      }

      // optional int32 from_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_type_)));
          set_has_from_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 d_type = 1;
  if (has_d_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->d_type(), output);
  }

  // required int32 d_address = 2;
  if (has_d_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->d_address(), output);
  }

  // required int32 cmd_class = 3;
  if (has_cmd_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd_class(), output);
  }

  // required int32 cmd_func = 4;
  if (has_cmd_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cmd_func(), output);
  }

  // required string execommand = 5;
  if (has_execommand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execommand().data(), this->execommand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->execommand(), output);
  }

  // optional string dcode = 6;
  if (has_dcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dcode().data(), this->dcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dcode(), output);
  }

  // required string m_body = 7;
  if (has_m_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_body().data(), this->m_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_body(), output);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->token(), output);
  }

  // optional string seq_num = 9;
  if (has_seq_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seq_num().data(), this->seq_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->seq_num(), output);
  }

  // optional int32 fd = 10;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fd(), output);
  }

  // optional int32 from_type = 11;
  if (has_from_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->from_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 d_type = 1;
  if (has_d_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->d_type(), target);
  }

  // required int32 d_address = 2;
  if (has_d_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->d_address(), target);
  }

  // required int32 cmd_class = 3;
  if (has_cmd_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmd_class(), target);
  }

  // required int32 cmd_func = 4;
  if (has_cmd_func()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cmd_func(), target);
  }

  // required string execommand = 5;
  if (has_execommand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->execommand().data(), this->execommand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->execommand(), target);
  }

  // optional string dcode = 6;
  if (has_dcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dcode().data(), this->dcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dcode(), target);
  }

  // required string m_body = 7;
  if (has_m_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_body().data(), this->m_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_body(), target);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->token(), target);
  }

  // optional string seq_num = 9;
  if (has_seq_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seq_num().data(), this->seq_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->seq_num(), target);
  }

  // optional int32 fd = 10;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fd(), target);
  }

  // optional int32 from_type = 11;
  if (has_from_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->from_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 d_type = 1;
    if (has_d_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->d_type());
    }

    // required int32 d_address = 2;
    if (has_d_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->d_address());
    }

    // required int32 cmd_class = 3;
    if (has_cmd_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_class());
    }

    // required int32 cmd_func = 4;
    if (has_cmd_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_func());
    }

    // required string execommand = 5;
    if (has_execommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->execommand());
    }

    // optional string dcode = 6;
    if (has_dcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dcode());
    }

    // required string m_body = 7;
    if (has_m_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_body());
    }

    // optional string token = 8;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string seq_num = 9;
    if (has_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seq_num());
    }

    // optional int32 fd = 10;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int32 from_type = 11;
    if (has_from_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MRequest::MergeFrom(const MRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_d_type()) {
      set_d_type(from.d_type());
    }
    if (from.has_d_address()) {
      set_d_address(from.d_address());
    }
    if (from.has_cmd_class()) {
      set_cmd_class(from.cmd_class());
    }
    if (from.has_cmd_func()) {
      set_cmd_func(from.cmd_func());
    }
    if (from.has_execommand()) {
      set_execommand(from.execommand());
    }
    if (from.has_dcode()) {
      set_dcode(from.dcode());
    }
    if (from.has_m_body()) {
      set_m_body(from.m_body());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seq_num()) {
      set_seq_num(from.seq_num());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_from_type()) {
      set_from_type(from.from_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MRequest::CopyFrom(const MRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void MRequest::Swap(MRequest* other) {
  if (other != this) {
    std::swap(d_type_, other->d_type_);
    std::swap(d_address_, other->d_address_);
    std::swap(cmd_class_, other->cmd_class_);
    std::swap(cmd_func_, other->cmd_func_);
    std::swap(execommand_, other->execommand_);
    std::swap(dcode_, other->dcode_);
    std::swap(m_body_, other->m_body_);
    std::swap(token_, other->token_);
    std::swap(seq_num_, other->seq_num_);
    std::swap(fd_, other->fd_);
    std::swap(from_type_, other->from_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MRequest_descriptor_;
  metadata.reflection = MRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MResponse::kRespCodeFieldNumber;
const int MResponse::kRespMessageFieldNumber;
const int MResponse::kSeqNumFieldNumber;
#endif  // !_MSC_VER

MResponse::MResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MResponse::InitAsDefaultInstance() {
}

MResponse::MResponse(const MResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MResponse::SharedCtor() {
  _cached_size_ = 0;
  resp_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resp_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MResponse::~MResponse() {
  SharedDtor();
}

void MResponse::SharedDtor() {
  if (resp_code_ != &::google::protobuf::internal::kEmptyString) {
    delete resp_code_;
  }
  if (resp_message_ != &::google::protobuf::internal::kEmptyString) {
    delete resp_message_;
  }
  if (seq_num_ != &::google::protobuf::internal::kEmptyString) {
    delete seq_num_;
  }
  if (this != default_instance_) {
  }
}

void MResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MResponse_descriptor_;
}

const MResponse& MResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataMessage_2eproto();
  return *default_instance_;
}

MResponse* MResponse::default_instance_ = NULL;

MResponse* MResponse::New() const {
  return new MResponse;
}

void MResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_resp_code()) {
      if (resp_code_ != &::google::protobuf::internal::kEmptyString) {
        resp_code_->clear();
      }
    }
    if (has_resp_message()) {
      if (resp_message_ != &::google::protobuf::internal::kEmptyString) {
        resp_message_->clear();
      }
    }
    if (has_seq_num()) {
      if (seq_num_ != &::google::protobuf::internal::kEmptyString) {
        seq_num_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resp_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resp_code().data(), this->resp_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resp_message;
        break;
      }

      // optional string resp_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resp_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resp_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resp_message().data(), this->resp_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seq_num;
        break;
      }

      // optional string seq_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seq_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seq_num().data(), this->seq_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string resp_code = 1;
  if (has_resp_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resp_code().data(), this->resp_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->resp_code(), output);
  }

  // optional string resp_message = 2;
  if (has_resp_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resp_message().data(), this->resp_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resp_message(), output);
  }

  // optional string seq_num = 3;
  if (has_seq_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seq_num().data(), this->seq_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->seq_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string resp_code = 1;
  if (has_resp_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resp_code().data(), this->resp_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resp_code(), target);
  }

  // optional string resp_message = 2;
  if (has_resp_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resp_message().data(), this->resp_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resp_message(), target);
  }

  // optional string seq_num = 3;
  if (has_seq_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seq_num().data(), this->seq_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->seq_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resp_code = 1;
    if (has_resp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resp_code());
    }

    // optional string resp_message = 2;
    if (has_resp_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resp_message());
    }

    // optional string seq_num = 3;
    if (has_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seq_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MResponse::MergeFrom(const MResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resp_code()) {
      set_resp_code(from.resp_code());
    }
    if (from.has_resp_message()) {
      set_resp_message(from.resp_message());
    }
    if (from.has_seq_num()) {
      set_seq_num(from.seq_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MResponse::CopyFrom(const MResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MResponse::Swap(MResponse* other) {
  if (other != this) {
    std::swap(resp_code_, other->resp_code_);
    std::swap(resp_message_, other->resp_message_);
    std::swap(seq_num_, other->seq_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MResponse_descriptor_;
  metadata.reflection = MResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AFPROC

// @@protoc_insertion_point(global_scope)
