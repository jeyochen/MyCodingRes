// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataMessage.proto

#ifndef PROTOBUF_DataMessage_2eproto__INCLUDED
#define PROTOBUF_DataMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace AFPROC {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DataMessage_2eproto();
void protobuf_AssignDesc_DataMessage_2eproto();
void protobuf_ShutdownFile_DataMessage_2eproto();

class MCommand;
class MRequest;
class MResponse;

// ===================================================================

class MCommand : public ::google::protobuf::Message {
 public:
  MCommand();
  virtual ~MCommand();

  MCommand(const MCommand& from);

  inline MCommand& operator=(const MCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MCommand& default_instance();

  void Swap(MCommand* other);

  // implements Message ----------------------------------------------

  MCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MCommand& from);
  void MergeFrom(const MCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 d_type = 1;
  inline bool has_d_type() const;
  inline void clear_d_type();
  static const int kDTypeFieldNumber = 1;
  inline ::google::protobuf::int32 d_type() const;
  inline void set_d_type(::google::protobuf::int32 value);

  // required int32 d_address = 2;
  inline bool has_d_address() const;
  inline void clear_d_address();
  static const int kDAddressFieldNumber = 2;
  inline ::google::protobuf::int32 d_address() const;
  inline void set_d_address(::google::protobuf::int32 value);

  // required int32 cmd_class = 3;
  inline bool has_cmd_class() const;
  inline void clear_cmd_class();
  static const int kCmdClassFieldNumber = 3;
  inline ::google::protobuf::int32 cmd_class() const;
  inline void set_cmd_class(::google::protobuf::int32 value);

  // required int32 cmd_func = 4;
  inline bool has_cmd_func() const;
  inline void clear_cmd_func();
  static const int kCmdFuncFieldNumber = 4;
  inline ::google::protobuf::int32 cmd_func() const;
  inline void set_cmd_func(::google::protobuf::int32 value);

  // required string execommand = 5;
  inline bool has_execommand() const;
  inline void clear_execommand();
  static const int kExecommandFieldNumber = 5;
  inline const ::std::string& execommand() const;
  inline void set_execommand(const ::std::string& value);
  inline void set_execommand(const char* value);
  inline void set_execommand(const char* value, size_t size);
  inline ::std::string* mutable_execommand();
  inline ::std::string* release_execommand();
  inline void set_allocated_execommand(::std::string* execommand);

  // optional string dcode = 6;
  inline bool has_dcode() const;
  inline void clear_dcode();
  static const int kDcodeFieldNumber = 6;
  inline const ::std::string& dcode() const;
  inline void set_dcode(const ::std::string& value);
  inline void set_dcode(const char* value);
  inline void set_dcode(const char* value, size_t size);
  inline ::std::string* mutable_dcode();
  inline ::std::string* release_dcode();
  inline void set_allocated_dcode(::std::string* dcode);

  // optional int32 sk_hostno_h = 7;
  inline bool has_sk_hostno_h() const;
  inline void clear_sk_hostno_h();
  static const int kSkHostnoHFieldNumber = 7;
  inline ::google::protobuf::int32 sk_hostno_h() const;
  inline void set_sk_hostno_h(::google::protobuf::int32 value);

  // optional int32 sk_hostno_l = 8;
  inline bool has_sk_hostno_l() const;
  inline void clear_sk_hostno_l();
  static const int kSkHostnoLFieldNumber = 8;
  inline ::google::protobuf::int32 sk_hostno_l() const;
  inline void set_sk_hostno_l(::google::protobuf::int32 value);

  // optional int32 sk_host_group = 9;
  inline bool has_sk_host_group() const;
  inline void clear_sk_host_group();
  static const int kSkHostGroupFieldNumber = 9;
  inline ::google::protobuf::int32 sk_host_group() const;
  inline void set_sk_host_group(::google::protobuf::int32 value);

  // optional int32 sk_fangqu_no = 10;
  inline bool has_sk_fangqu_no() const;
  inline void clear_sk_fangqu_no();
  static const int kSkFangquNoFieldNumber = 10;
  inline ::google::protobuf::int32 sk_fangqu_no() const;
  inline void set_sk_fangqu_no(::google::protobuf::int32 value);

  // optional string ip = 11;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 11;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 12;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 12;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 fd = 13;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 13;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFPROC.MCommand)
 private:
  inline void set_has_d_type();
  inline void clear_has_d_type();
  inline void set_has_d_address();
  inline void clear_has_d_address();
  inline void set_has_cmd_class();
  inline void clear_has_cmd_class();
  inline void set_has_cmd_func();
  inline void clear_has_cmd_func();
  inline void set_has_execommand();
  inline void clear_has_execommand();
  inline void set_has_dcode();
  inline void clear_has_dcode();
  inline void set_has_sk_hostno_h();
  inline void clear_has_sk_hostno_h();
  inline void set_has_sk_hostno_l();
  inline void clear_has_sk_hostno_l();
  inline void set_has_sk_host_group();
  inline void clear_has_sk_host_group();
  inline void set_has_sk_fangqu_no();
  inline void clear_has_sk_fangqu_no();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_fd();
  inline void clear_has_fd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 d_type_;
  ::google::protobuf::int32 d_address_;
  ::google::protobuf::int32 cmd_class_;
  ::google::protobuf::int32 cmd_func_;
  ::std::string* execommand_;
  ::std::string* dcode_;
  ::google::protobuf::int32 sk_hostno_h_;
  ::google::protobuf::int32 sk_hostno_l_;
  ::google::protobuf::int32 sk_host_group_;
  ::google::protobuf::int32 sk_fangqu_no_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 fd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_DataMessage_2eproto();
  friend void protobuf_AssignDesc_DataMessage_2eproto();
  friend void protobuf_ShutdownFile_DataMessage_2eproto();

  void InitAsDefaultInstance();
  static MCommand* default_instance_;
};
// -------------------------------------------------------------------

class MRequest : public ::google::protobuf::Message {
 public:
  MRequest();
  virtual ~MRequest();

  MRequest(const MRequest& from);

  inline MRequest& operator=(const MRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MRequest& default_instance();

  void Swap(MRequest* other);

  // implements Message ----------------------------------------------

  MRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MRequest& from);
  void MergeFrom(const MRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 d_type = 1;
  inline bool has_d_type() const;
  inline void clear_d_type();
  static const int kDTypeFieldNumber = 1;
  inline ::google::protobuf::int32 d_type() const;
  inline void set_d_type(::google::protobuf::int32 value);

  // required int32 d_address = 2;
  inline bool has_d_address() const;
  inline void clear_d_address();
  static const int kDAddressFieldNumber = 2;
  inline ::google::protobuf::int32 d_address() const;
  inline void set_d_address(::google::protobuf::int32 value);

  // required int32 cmd_class = 3;
  inline bool has_cmd_class() const;
  inline void clear_cmd_class();
  static const int kCmdClassFieldNumber = 3;
  inline ::google::protobuf::int32 cmd_class() const;
  inline void set_cmd_class(::google::protobuf::int32 value);

  // required int32 cmd_func = 4;
  inline bool has_cmd_func() const;
  inline void clear_cmd_func();
  static const int kCmdFuncFieldNumber = 4;
  inline ::google::protobuf::int32 cmd_func() const;
  inline void set_cmd_func(::google::protobuf::int32 value);

  // required string execommand = 5;
  inline bool has_execommand() const;
  inline void clear_execommand();
  static const int kExecommandFieldNumber = 5;
  inline const ::std::string& execommand() const;
  inline void set_execommand(const ::std::string& value);
  inline void set_execommand(const char* value);
  inline void set_execommand(const char* value, size_t size);
  inline ::std::string* mutable_execommand();
  inline ::std::string* release_execommand();
  inline void set_allocated_execommand(::std::string* execommand);

  // optional string dcode = 6;
  inline bool has_dcode() const;
  inline void clear_dcode();
  static const int kDcodeFieldNumber = 6;
  inline const ::std::string& dcode() const;
  inline void set_dcode(const ::std::string& value);
  inline void set_dcode(const char* value);
  inline void set_dcode(const char* value, size_t size);
  inline ::std::string* mutable_dcode();
  inline ::std::string* release_dcode();
  inline void set_allocated_dcode(::std::string* dcode);

  // required string m_body = 7;
  inline bool has_m_body() const;
  inline void clear_m_body();
  static const int kMBodyFieldNumber = 7;
  inline const ::std::string& m_body() const;
  inline void set_m_body(const ::std::string& value);
  inline void set_m_body(const char* value);
  inline void set_m_body(const char* value, size_t size);
  inline ::std::string* mutable_m_body();
  inline ::std::string* release_m_body();
  inline void set_allocated_m_body(::std::string* m_body);

  // optional string token = 8;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 8;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string seq_num = 9;
  inline bool has_seq_num() const;
  inline void clear_seq_num();
  static const int kSeqNumFieldNumber = 9;
  inline const ::std::string& seq_num() const;
  inline void set_seq_num(const ::std::string& value);
  inline void set_seq_num(const char* value);
  inline void set_seq_num(const char* value, size_t size);
  inline ::std::string* mutable_seq_num();
  inline ::std::string* release_seq_num();
  inline void set_allocated_seq_num(::std::string* seq_num);

  // optional int32 fd = 10;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 10;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);

  // optional int32 from_type = 11;
  inline bool has_from_type() const;
  inline void clear_from_type();
  static const int kFromTypeFieldNumber = 11;
  inline ::google::protobuf::int32 from_type() const;
  inline void set_from_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFPROC.MRequest)
 private:
  inline void set_has_d_type();
  inline void clear_has_d_type();
  inline void set_has_d_address();
  inline void clear_has_d_address();
  inline void set_has_cmd_class();
  inline void clear_has_cmd_class();
  inline void set_has_cmd_func();
  inline void clear_has_cmd_func();
  inline void set_has_execommand();
  inline void clear_has_execommand();
  inline void set_has_dcode();
  inline void clear_has_dcode();
  inline void set_has_m_body();
  inline void clear_has_m_body();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_seq_num();
  inline void clear_has_seq_num();
  inline void set_has_fd();
  inline void clear_has_fd();
  inline void set_has_from_type();
  inline void clear_has_from_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 d_type_;
  ::google::protobuf::int32 d_address_;
  ::google::protobuf::int32 cmd_class_;
  ::google::protobuf::int32 cmd_func_;
  ::std::string* execommand_;
  ::std::string* dcode_;
  ::std::string* m_body_;
  ::std::string* token_;
  ::std::string* seq_num_;
  ::google::protobuf::int32 fd_;
  ::google::protobuf::int32 from_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_DataMessage_2eproto();
  friend void protobuf_AssignDesc_DataMessage_2eproto();
  friend void protobuf_ShutdownFile_DataMessage_2eproto();

  void InitAsDefaultInstance();
  static MRequest* default_instance_;
};
// -------------------------------------------------------------------

class MResponse : public ::google::protobuf::Message {
 public:
  MResponse();
  virtual ~MResponse();

  MResponse(const MResponse& from);

  inline MResponse& operator=(const MResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MResponse& default_instance();

  void Swap(MResponse* other);

  // implements Message ----------------------------------------------

  MResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MResponse& from);
  void MergeFrom(const MResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string resp_code = 1;
  inline bool has_resp_code() const;
  inline void clear_resp_code();
  static const int kRespCodeFieldNumber = 1;
  inline const ::std::string& resp_code() const;
  inline void set_resp_code(const ::std::string& value);
  inline void set_resp_code(const char* value);
  inline void set_resp_code(const char* value, size_t size);
  inline ::std::string* mutable_resp_code();
  inline ::std::string* release_resp_code();
  inline void set_allocated_resp_code(::std::string* resp_code);

  // optional string resp_message = 2;
  inline bool has_resp_message() const;
  inline void clear_resp_message();
  static const int kRespMessageFieldNumber = 2;
  inline const ::std::string& resp_message() const;
  inline void set_resp_message(const ::std::string& value);
  inline void set_resp_message(const char* value);
  inline void set_resp_message(const char* value, size_t size);
  inline ::std::string* mutable_resp_message();
  inline ::std::string* release_resp_message();
  inline void set_allocated_resp_message(::std::string* resp_message);

  // optional string seq_num = 3;
  inline bool has_seq_num() const;
  inline void clear_seq_num();
  static const int kSeqNumFieldNumber = 3;
  inline const ::std::string& seq_num() const;
  inline void set_seq_num(const ::std::string& value);
  inline void set_seq_num(const char* value);
  inline void set_seq_num(const char* value, size_t size);
  inline ::std::string* mutable_seq_num();
  inline ::std::string* release_seq_num();
  inline void set_allocated_seq_num(::std::string* seq_num);

  // @@protoc_insertion_point(class_scope:AFPROC.MResponse)
 private:
  inline void set_has_resp_code();
  inline void clear_has_resp_code();
  inline void set_has_resp_message();
  inline void clear_has_resp_message();
  inline void set_has_seq_num();
  inline void clear_has_seq_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* resp_code_;
  ::std::string* resp_message_;
  ::std::string* seq_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DataMessage_2eproto();
  friend void protobuf_AssignDesc_DataMessage_2eproto();
  friend void protobuf_ShutdownFile_DataMessage_2eproto();

  void InitAsDefaultInstance();
  static MResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MCommand

// required int32 d_type = 1;
inline bool MCommand::has_d_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MCommand::set_has_d_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MCommand::clear_has_d_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MCommand::clear_d_type() {
  d_type_ = 0;
  clear_has_d_type();
}
inline ::google::protobuf::int32 MCommand::d_type() const {
  return d_type_;
}
inline void MCommand::set_d_type(::google::protobuf::int32 value) {
  set_has_d_type();
  d_type_ = value;
}

// required int32 d_address = 2;
inline bool MCommand::has_d_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MCommand::set_has_d_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MCommand::clear_has_d_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MCommand::clear_d_address() {
  d_address_ = 0;
  clear_has_d_address();
}
inline ::google::protobuf::int32 MCommand::d_address() const {
  return d_address_;
}
inline void MCommand::set_d_address(::google::protobuf::int32 value) {
  set_has_d_address();
  d_address_ = value;
}

// required int32 cmd_class = 3;
inline bool MCommand::has_cmd_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MCommand::set_has_cmd_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MCommand::clear_has_cmd_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MCommand::clear_cmd_class() {
  cmd_class_ = 0;
  clear_has_cmd_class();
}
inline ::google::protobuf::int32 MCommand::cmd_class() const {
  return cmd_class_;
}
inline void MCommand::set_cmd_class(::google::protobuf::int32 value) {
  set_has_cmd_class();
  cmd_class_ = value;
}

// required int32 cmd_func = 4;
inline bool MCommand::has_cmd_func() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MCommand::set_has_cmd_func() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MCommand::clear_has_cmd_func() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MCommand::clear_cmd_func() {
  cmd_func_ = 0;
  clear_has_cmd_func();
}
inline ::google::protobuf::int32 MCommand::cmd_func() const {
  return cmd_func_;
}
inline void MCommand::set_cmd_func(::google::protobuf::int32 value) {
  set_has_cmd_func();
  cmd_func_ = value;
}

// required string execommand = 5;
inline bool MCommand::has_execommand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MCommand::set_has_execommand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MCommand::clear_has_execommand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MCommand::clear_execommand() {
  if (execommand_ != &::google::protobuf::internal::kEmptyString) {
    execommand_->clear();
  }
  clear_has_execommand();
}
inline const ::std::string& MCommand::execommand() const {
  return *execommand_;
}
inline void MCommand::set_execommand(const ::std::string& value) {
  set_has_execommand();
  if (execommand_ == &::google::protobuf::internal::kEmptyString) {
    execommand_ = new ::std::string;
  }
  execommand_->assign(value);
}
inline void MCommand::set_execommand(const char* value) {
  set_has_execommand();
  if (execommand_ == &::google::protobuf::internal::kEmptyString) {
    execommand_ = new ::std::string;
  }
  execommand_->assign(value);
}
inline void MCommand::set_execommand(const char* value, size_t size) {
  set_has_execommand();
  if (execommand_ == &::google::protobuf::internal::kEmptyString) {
    execommand_ = new ::std::string;
  }
  execommand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MCommand::mutable_execommand() {
  set_has_execommand();
  if (execommand_ == &::google::protobuf::internal::kEmptyString) {
    execommand_ = new ::std::string;
  }
  return execommand_;
}
inline ::std::string* MCommand::release_execommand() {
  clear_has_execommand();
  if (execommand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = execommand_;
    execommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MCommand::set_allocated_execommand(::std::string* execommand) {
  if (execommand_ != &::google::protobuf::internal::kEmptyString) {
    delete execommand_;
  }
  if (execommand) {
    set_has_execommand();
    execommand_ = execommand;
  } else {
    clear_has_execommand();
    execommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dcode = 6;
inline bool MCommand::has_dcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MCommand::set_has_dcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MCommand::clear_has_dcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MCommand::clear_dcode() {
  if (dcode_ != &::google::protobuf::internal::kEmptyString) {
    dcode_->clear();
  }
  clear_has_dcode();
}
inline const ::std::string& MCommand::dcode() const {
  return *dcode_;
}
inline void MCommand::set_dcode(const ::std::string& value) {
  set_has_dcode();
  if (dcode_ == &::google::protobuf::internal::kEmptyString) {
    dcode_ = new ::std::string;
  }
  dcode_->assign(value);
}
inline void MCommand::set_dcode(const char* value) {
  set_has_dcode();
  if (dcode_ == &::google::protobuf::internal::kEmptyString) {
    dcode_ = new ::std::string;
  }
  dcode_->assign(value);
}
inline void MCommand::set_dcode(const char* value, size_t size) {
  set_has_dcode();
  if (dcode_ == &::google::protobuf::internal::kEmptyString) {
    dcode_ = new ::std::string;
  }
  dcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MCommand::mutable_dcode() {
  set_has_dcode();
  if (dcode_ == &::google::protobuf::internal::kEmptyString) {
    dcode_ = new ::std::string;
  }
  return dcode_;
}
inline ::std::string* MCommand::release_dcode() {
  clear_has_dcode();
  if (dcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dcode_;
    dcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MCommand::set_allocated_dcode(::std::string* dcode) {
  if (dcode_ != &::google::protobuf::internal::kEmptyString) {
    delete dcode_;
  }
  if (dcode) {
    set_has_dcode();
    dcode_ = dcode;
  } else {
    clear_has_dcode();
    dcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sk_hostno_h = 7;
inline bool MCommand::has_sk_hostno_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MCommand::set_has_sk_hostno_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MCommand::clear_has_sk_hostno_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MCommand::clear_sk_hostno_h() {
  sk_hostno_h_ = 0;
  clear_has_sk_hostno_h();
}
inline ::google::protobuf::int32 MCommand::sk_hostno_h() const {
  return sk_hostno_h_;
}
inline void MCommand::set_sk_hostno_h(::google::protobuf::int32 value) {
  set_has_sk_hostno_h();
  sk_hostno_h_ = value;
}

// optional int32 sk_hostno_l = 8;
inline bool MCommand::has_sk_hostno_l() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MCommand::set_has_sk_hostno_l() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MCommand::clear_has_sk_hostno_l() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MCommand::clear_sk_hostno_l() {
  sk_hostno_l_ = 0;
  clear_has_sk_hostno_l();
}
inline ::google::protobuf::int32 MCommand::sk_hostno_l() const {
  return sk_hostno_l_;
}
inline void MCommand::set_sk_hostno_l(::google::protobuf::int32 value) {
  set_has_sk_hostno_l();
  sk_hostno_l_ = value;
}

// optional int32 sk_host_group = 9;
inline bool MCommand::has_sk_host_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MCommand::set_has_sk_host_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MCommand::clear_has_sk_host_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MCommand::clear_sk_host_group() {
  sk_host_group_ = 0;
  clear_has_sk_host_group();
}
inline ::google::protobuf::int32 MCommand::sk_host_group() const {
  return sk_host_group_;
}
inline void MCommand::set_sk_host_group(::google::protobuf::int32 value) {
  set_has_sk_host_group();
  sk_host_group_ = value;
}

// optional int32 sk_fangqu_no = 10;
inline bool MCommand::has_sk_fangqu_no() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MCommand::set_has_sk_fangqu_no() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MCommand::clear_has_sk_fangqu_no() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MCommand::clear_sk_fangqu_no() {
  sk_fangqu_no_ = 0;
  clear_has_sk_fangqu_no();
}
inline ::google::protobuf::int32 MCommand::sk_fangqu_no() const {
  return sk_fangqu_no_;
}
inline void MCommand::set_sk_fangqu_no(::google::protobuf::int32 value) {
  set_has_sk_fangqu_no();
  sk_fangqu_no_ = value;
}

// optional string ip = 11;
inline bool MCommand::has_ip() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MCommand::set_has_ip() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MCommand::clear_has_ip() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MCommand::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& MCommand::ip() const {
  return *ip_;
}
inline void MCommand::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MCommand::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MCommand::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MCommand::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* MCommand::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MCommand::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 12;
inline bool MCommand::has_port() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MCommand::set_has_port() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MCommand::clear_has_port() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MCommand::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 MCommand::port() const {
  return port_;
}
inline void MCommand::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 fd = 13;
inline bool MCommand::has_fd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MCommand::set_has_fd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MCommand::clear_has_fd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MCommand::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
inline ::google::protobuf::int32 MCommand::fd() const {
  return fd_;
}
inline void MCommand::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
}

// -------------------------------------------------------------------

// MRequest

// required int32 d_type = 1;
inline bool MRequest::has_d_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MRequest::set_has_d_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MRequest::clear_has_d_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MRequest::clear_d_type() {
  d_type_ = 0;
  clear_has_d_type();
}
inline ::google::protobuf::int32 MRequest::d_type() const {
  return d_type_;
}
inline void MRequest::set_d_type(::google::protobuf::int32 value) {
  set_has_d_type();
  d_type_ = value;
}

// required int32 d_address = 2;
inline bool MRequest::has_d_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MRequest::set_has_d_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MRequest::clear_has_d_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MRequest::clear_d_address() {
  d_address_ = 0;
  clear_has_d_address();
}
inline ::google::protobuf::int32 MRequest::d_address() const {
  return d_address_;
}
inline void MRequest::set_d_address(::google::protobuf::int32 value) {
  set_has_d_address();
  d_address_ = value;
}

// required int32 cmd_class = 3;
inline bool MRequest::has_cmd_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MRequest::set_has_cmd_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MRequest::clear_has_cmd_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MRequest::clear_cmd_class() {
  cmd_class_ = 0;
  clear_has_cmd_class();
}
inline ::google::protobuf::int32 MRequest::cmd_class() const {
  return cmd_class_;
}
inline void MRequest::set_cmd_class(::google::protobuf::int32 value) {
  set_has_cmd_class();
  cmd_class_ = value;
}

// required int32 cmd_func = 4;
inline bool MRequest::has_cmd_func() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MRequest::set_has_cmd_func() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MRequest::clear_has_cmd_func() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MRequest::clear_cmd_func() {
  cmd_func_ = 0;
  clear_has_cmd_func();
}
inline ::google::protobuf::int32 MRequest::cmd_func() const {
  return cmd_func_;
}
inline void MRequest::set_cmd_func(::google::protobuf::int32 value) {
  set_has_cmd_func();
  cmd_func_ = value;
}

// required string execommand = 5;
inline bool MRequest::has_execommand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MRequest::set_has_execommand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MRequest::clear_has_execommand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MRequest::clear_execommand() {
  if (execommand_ != &::google::protobuf::internal::kEmptyString) {
    execommand_->clear();
  }
  clear_has_execommand();
}
inline const ::std::string& MRequest::execommand() const {
  return *execommand_;
}
inline void MRequest::set_execommand(const ::std::string& value) {
  set_has_execommand();
  if (execommand_ == &::google::protobuf::internal::kEmptyString) {
    execommand_ = new ::std::string;
  }
  execommand_->assign(value);
}
inline void MRequest::set_execommand(const char* value) {
  set_has_execommand();
  if (execommand_ == &::google::protobuf::internal::kEmptyString) {
    execommand_ = new ::std::string;
  }
  execommand_->assign(value);
}
inline void MRequest::set_execommand(const char* value, size_t size) {
  set_has_execommand();
  if (execommand_ == &::google::protobuf::internal::kEmptyString) {
    execommand_ = new ::std::string;
  }
  execommand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MRequest::mutable_execommand() {
  set_has_execommand();
  if (execommand_ == &::google::protobuf::internal::kEmptyString) {
    execommand_ = new ::std::string;
  }
  return execommand_;
}
inline ::std::string* MRequest::release_execommand() {
  clear_has_execommand();
  if (execommand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = execommand_;
    execommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MRequest::set_allocated_execommand(::std::string* execommand) {
  if (execommand_ != &::google::protobuf::internal::kEmptyString) {
    delete execommand_;
  }
  if (execommand) {
    set_has_execommand();
    execommand_ = execommand;
  } else {
    clear_has_execommand();
    execommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dcode = 6;
inline bool MRequest::has_dcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MRequest::set_has_dcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MRequest::clear_has_dcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MRequest::clear_dcode() {
  if (dcode_ != &::google::protobuf::internal::kEmptyString) {
    dcode_->clear();
  }
  clear_has_dcode();
}
inline const ::std::string& MRequest::dcode() const {
  return *dcode_;
}
inline void MRequest::set_dcode(const ::std::string& value) {
  set_has_dcode();
  if (dcode_ == &::google::protobuf::internal::kEmptyString) {
    dcode_ = new ::std::string;
  }
  dcode_->assign(value);
}
inline void MRequest::set_dcode(const char* value) {
  set_has_dcode();
  if (dcode_ == &::google::protobuf::internal::kEmptyString) {
    dcode_ = new ::std::string;
  }
  dcode_->assign(value);
}
inline void MRequest::set_dcode(const char* value, size_t size) {
  set_has_dcode();
  if (dcode_ == &::google::protobuf::internal::kEmptyString) {
    dcode_ = new ::std::string;
  }
  dcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MRequest::mutable_dcode() {
  set_has_dcode();
  if (dcode_ == &::google::protobuf::internal::kEmptyString) {
    dcode_ = new ::std::string;
  }
  return dcode_;
}
inline ::std::string* MRequest::release_dcode() {
  clear_has_dcode();
  if (dcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dcode_;
    dcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MRequest::set_allocated_dcode(::std::string* dcode) {
  if (dcode_ != &::google::protobuf::internal::kEmptyString) {
    delete dcode_;
  }
  if (dcode) {
    set_has_dcode();
    dcode_ = dcode;
  } else {
    clear_has_dcode();
    dcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m_body = 7;
inline bool MRequest::has_m_body() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MRequest::set_has_m_body() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MRequest::clear_has_m_body() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MRequest::clear_m_body() {
  if (m_body_ != &::google::protobuf::internal::kEmptyString) {
    m_body_->clear();
  }
  clear_has_m_body();
}
inline const ::std::string& MRequest::m_body() const {
  return *m_body_;
}
inline void MRequest::set_m_body(const ::std::string& value) {
  set_has_m_body();
  if (m_body_ == &::google::protobuf::internal::kEmptyString) {
    m_body_ = new ::std::string;
  }
  m_body_->assign(value);
}
inline void MRequest::set_m_body(const char* value) {
  set_has_m_body();
  if (m_body_ == &::google::protobuf::internal::kEmptyString) {
    m_body_ = new ::std::string;
  }
  m_body_->assign(value);
}
inline void MRequest::set_m_body(const char* value, size_t size) {
  set_has_m_body();
  if (m_body_ == &::google::protobuf::internal::kEmptyString) {
    m_body_ = new ::std::string;
  }
  m_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MRequest::mutable_m_body() {
  set_has_m_body();
  if (m_body_ == &::google::protobuf::internal::kEmptyString) {
    m_body_ = new ::std::string;
  }
  return m_body_;
}
inline ::std::string* MRequest::release_m_body() {
  clear_has_m_body();
  if (m_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_body_;
    m_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MRequest::set_allocated_m_body(::std::string* m_body) {
  if (m_body_ != &::google::protobuf::internal::kEmptyString) {
    delete m_body_;
  }
  if (m_body) {
    set_has_m_body();
    m_body_ = m_body;
  } else {
    clear_has_m_body();
    m_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 8;
inline bool MRequest::has_token() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MRequest::set_has_token() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MRequest::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& MRequest::token() const {
  return *token_;
}
inline void MRequest::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void MRequest::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void MRequest::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MRequest::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* MRequest::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MRequest::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string seq_num = 9;
inline bool MRequest::has_seq_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MRequest::set_has_seq_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MRequest::clear_has_seq_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MRequest::clear_seq_num() {
  if (seq_num_ != &::google::protobuf::internal::kEmptyString) {
    seq_num_->clear();
  }
  clear_has_seq_num();
}
inline const ::std::string& MRequest::seq_num() const {
  return *seq_num_;
}
inline void MRequest::set_seq_num(const ::std::string& value) {
  set_has_seq_num();
  if (seq_num_ == &::google::protobuf::internal::kEmptyString) {
    seq_num_ = new ::std::string;
  }
  seq_num_->assign(value);
}
inline void MRequest::set_seq_num(const char* value) {
  set_has_seq_num();
  if (seq_num_ == &::google::protobuf::internal::kEmptyString) {
    seq_num_ = new ::std::string;
  }
  seq_num_->assign(value);
}
inline void MRequest::set_seq_num(const char* value, size_t size) {
  set_has_seq_num();
  if (seq_num_ == &::google::protobuf::internal::kEmptyString) {
    seq_num_ = new ::std::string;
  }
  seq_num_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MRequest::mutable_seq_num() {
  set_has_seq_num();
  if (seq_num_ == &::google::protobuf::internal::kEmptyString) {
    seq_num_ = new ::std::string;
  }
  return seq_num_;
}
inline ::std::string* MRequest::release_seq_num() {
  clear_has_seq_num();
  if (seq_num_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seq_num_;
    seq_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MRequest::set_allocated_seq_num(::std::string* seq_num) {
  if (seq_num_ != &::google::protobuf::internal::kEmptyString) {
    delete seq_num_;
  }
  if (seq_num) {
    set_has_seq_num();
    seq_num_ = seq_num;
  } else {
    clear_has_seq_num();
    seq_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 fd = 10;
inline bool MRequest::has_fd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MRequest::set_has_fd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MRequest::clear_has_fd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MRequest::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
inline ::google::protobuf::int32 MRequest::fd() const {
  return fd_;
}
inline void MRequest::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
}

// optional int32 from_type = 11;
inline bool MRequest::has_from_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MRequest::set_has_from_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MRequest::clear_has_from_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MRequest::clear_from_type() {
  from_type_ = 0;
  clear_has_from_type();
}
inline ::google::protobuf::int32 MRequest::from_type() const {
  return from_type_;
}
inline void MRequest::set_from_type(::google::protobuf::int32 value) {
  set_has_from_type();
  from_type_ = value;
}

// -------------------------------------------------------------------

// MResponse

// required string resp_code = 1;
inline bool MResponse::has_resp_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MResponse::set_has_resp_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MResponse::clear_has_resp_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MResponse::clear_resp_code() {
  if (resp_code_ != &::google::protobuf::internal::kEmptyString) {
    resp_code_->clear();
  }
  clear_has_resp_code();
}
inline const ::std::string& MResponse::resp_code() const {
  return *resp_code_;
}
inline void MResponse::set_resp_code(const ::std::string& value) {
  set_has_resp_code();
  if (resp_code_ == &::google::protobuf::internal::kEmptyString) {
    resp_code_ = new ::std::string;
  }
  resp_code_->assign(value);
}
inline void MResponse::set_resp_code(const char* value) {
  set_has_resp_code();
  if (resp_code_ == &::google::protobuf::internal::kEmptyString) {
    resp_code_ = new ::std::string;
  }
  resp_code_->assign(value);
}
inline void MResponse::set_resp_code(const char* value, size_t size) {
  set_has_resp_code();
  if (resp_code_ == &::google::protobuf::internal::kEmptyString) {
    resp_code_ = new ::std::string;
  }
  resp_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MResponse::mutable_resp_code() {
  set_has_resp_code();
  if (resp_code_ == &::google::protobuf::internal::kEmptyString) {
    resp_code_ = new ::std::string;
  }
  return resp_code_;
}
inline ::std::string* MResponse::release_resp_code() {
  clear_has_resp_code();
  if (resp_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resp_code_;
    resp_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MResponse::set_allocated_resp_code(::std::string* resp_code) {
  if (resp_code_ != &::google::protobuf::internal::kEmptyString) {
    delete resp_code_;
  }
  if (resp_code) {
    set_has_resp_code();
    resp_code_ = resp_code;
  } else {
    clear_has_resp_code();
    resp_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string resp_message = 2;
inline bool MResponse::has_resp_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MResponse::set_has_resp_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MResponse::clear_has_resp_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MResponse::clear_resp_message() {
  if (resp_message_ != &::google::protobuf::internal::kEmptyString) {
    resp_message_->clear();
  }
  clear_has_resp_message();
}
inline const ::std::string& MResponse::resp_message() const {
  return *resp_message_;
}
inline void MResponse::set_resp_message(const ::std::string& value) {
  set_has_resp_message();
  if (resp_message_ == &::google::protobuf::internal::kEmptyString) {
    resp_message_ = new ::std::string;
  }
  resp_message_->assign(value);
}
inline void MResponse::set_resp_message(const char* value) {
  set_has_resp_message();
  if (resp_message_ == &::google::protobuf::internal::kEmptyString) {
    resp_message_ = new ::std::string;
  }
  resp_message_->assign(value);
}
inline void MResponse::set_resp_message(const char* value, size_t size) {
  set_has_resp_message();
  if (resp_message_ == &::google::protobuf::internal::kEmptyString) {
    resp_message_ = new ::std::string;
  }
  resp_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MResponse::mutable_resp_message() {
  set_has_resp_message();
  if (resp_message_ == &::google::protobuf::internal::kEmptyString) {
    resp_message_ = new ::std::string;
  }
  return resp_message_;
}
inline ::std::string* MResponse::release_resp_message() {
  clear_has_resp_message();
  if (resp_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resp_message_;
    resp_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MResponse::set_allocated_resp_message(::std::string* resp_message) {
  if (resp_message_ != &::google::protobuf::internal::kEmptyString) {
    delete resp_message_;
  }
  if (resp_message) {
    set_has_resp_message();
    resp_message_ = resp_message;
  } else {
    clear_has_resp_message();
    resp_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string seq_num = 3;
inline bool MResponse::has_seq_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MResponse::set_has_seq_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MResponse::clear_has_seq_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MResponse::clear_seq_num() {
  if (seq_num_ != &::google::protobuf::internal::kEmptyString) {
    seq_num_->clear();
  }
  clear_has_seq_num();
}
inline const ::std::string& MResponse::seq_num() const {
  return *seq_num_;
}
inline void MResponse::set_seq_num(const ::std::string& value) {
  set_has_seq_num();
  if (seq_num_ == &::google::protobuf::internal::kEmptyString) {
    seq_num_ = new ::std::string;
  }
  seq_num_->assign(value);
}
inline void MResponse::set_seq_num(const char* value) {
  set_has_seq_num();
  if (seq_num_ == &::google::protobuf::internal::kEmptyString) {
    seq_num_ = new ::std::string;
  }
  seq_num_->assign(value);
}
inline void MResponse::set_seq_num(const char* value, size_t size) {
  set_has_seq_num();
  if (seq_num_ == &::google::protobuf::internal::kEmptyString) {
    seq_num_ = new ::std::string;
  }
  seq_num_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MResponse::mutable_seq_num() {
  set_has_seq_num();
  if (seq_num_ == &::google::protobuf::internal::kEmptyString) {
    seq_num_ = new ::std::string;
  }
  return seq_num_;
}
inline ::std::string* MResponse::release_seq_num() {
  clear_has_seq_num();
  if (seq_num_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seq_num_;
    seq_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MResponse::set_allocated_seq_num(::std::string* seq_num) {
  if (seq_num_ != &::google::protobuf::internal::kEmptyString) {
    delete seq_num_;
  }
  if (seq_num) {
    set_has_seq_num();
    seq_num_ = seq_num;
  } else {
    clear_has_seq_num();
    seq_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AFPROC

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataMessage_2eproto__INCLUDED
