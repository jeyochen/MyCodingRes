
// ChangeSizeDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "ChangeSize.h"
#include "ChangeSizeDlg.h"
#include "afxdialogex.h"
#include "CompressPicture.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CChangeSizeDlg 对话框




CChangeSizeDlg::CChangeSizeDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CChangeSizeDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CChangeSizeDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CChangeSizeDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &CChangeSizeDlg::OnBnClickedButton1)
END_MESSAGE_MAP()


// CChangeSizeDlg 消息处理程序

BOOL CChangeSizeDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码
    // 加载动态库
    LoadGdiplus();
	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CChangeSizeDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CChangeSizeDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CChangeSizeDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

void CChangeSizeDlg::OnBnClickedButton1()
{
	// TODO: 在此添加控件通知处理程序代码
	CString strOldFileName;

    // 打开浏览对话框
    CFileDialog fdlg(TRUE, _T(".jpg"), NULL, OFN_HIDEREADONLY, 
        _T("jpg|*.jpg|jpeg|*.jpeg|bmp|*.bmp|png|*.png|gif|*.gif|tiff|*.tiff|*|*.*||"));

    if (IDOK != fdlg.DoModal())
    {
        return;
    }

    strOldFileName = fdlg.GetPathName();
    if (0 >= strOldFileName.GetLength())
    {
        MessageBox(_T("请选择文件"));
        return;
    }

    // 获取文件扩展名，文件路径，文件名
    LPWSTR lpExt = PathFindExtensionW(strOldFileName); 

    // 检查是否是需要压缩的图片格式
    CString strExt(lpExt);
    if (0 != strExt.CompareNoCase(_T(".jpg"))  &&
        0 != strExt.CompareNoCase(_T(".jpeg")) &&
        0 != strExt.CompareNoCase(_T(".bmp"))  &&
        0 != strExt.CompareNoCase(_T(".png"))  &&
        0 != strExt.CompareNoCase(_T(".tiff")) &&
        0 != strExt.CompareNoCase(_T(".gif")))
    {
        return;
    }
    
    CCompressPicture pressPic;
    pressPic.CompressPicture(strOldFileName);
}


BOOL CChangeSizeDlg::LoadGdiplus()
{
    // 检查gdiplus.dll是否存在,已存则返回
    if (PathFileExists(_T("./GdiPlus.dll")))
    {
        return TRUE;
    }

    HRSRC hRsrc = FindResourceW(NULL, MAKEINTRESOURCE(IDR_GDIPLUS), _T("dll"));
    if (NULL == hRsrc)
    {
        return FALSE;
    }

    DWORD dwSize =  SizeofResource(NULL, hRsrc);
    if (0 >= dwSize)
    {
        return FALSE;
    }

    HGLOBAL hGlobal =  LoadResource(NULL, hRsrc);
    if (NULL == hGlobal)
    {
        return FALSE;
    }

    LPVOID pBuffer = LockResource(hGlobal);
    if (NULL == pBuffer)
    {
        return FALSE;
    }

    CFile file(_T("./GdiPlus.dll"), CFile::modeCreate|CFile::modeWrite);
    if (NULL == file)
    {
        return FALSE;
    }
    file.Write(pBuffer, dwSize);
    file.Close();
    FreeResource(hGlobal);

    return TRUE;
}